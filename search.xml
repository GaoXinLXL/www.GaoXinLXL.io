<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop学习之PageRank</title>
      <link href="/2020/05/28/hadoop-xue-xi-zhi-pagerank/"/>
      <url>/2020/05/28/hadoop-xue-xi-zhi-pagerank/</url>
      
        <content type="html"><![CDATA[<p>PageRank，网页排名，是Google专有的算法，用于衡量特定网页相对于搜索引擎索引中的其他网页而言的重要程度。</p><a id="more"></a><h1 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h1><p><img src="https://i.loli.net/2020/05/28/FpN4RVG7UmXAyZJ.png" alt="20160514130534469.png"></p><h1 id="设计数据存储格式"><a href="#设计数据存储格式" class="headerlink" title="设计数据存储格式"></a>设计数据存储格式</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><pre class=" language-java"><code class="language-java">A <span class="token number">0.25</span> B C DB <span class="token number">0.25</span> A DC <span class="token number">0.25</span> CD <span class="token number">0.25</span> B C</code></pre><ul><li>第一列代表当前网页</li><li>第二列代表当前网页PR值</li><li>之后的字母代表当前网页指向的链接网页</li><li>字符之间用一个空格隔开</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>因为PageRank算法需要迭代计算，所以输出格式应与输入格式保持一致。</p><h1 id="MapReduce编程实现"><a href="#MapReduce编程实现" class="headerlink" title="MapReduce编程实现"></a>MapReduce编程实现</h1><h2 id="Map阶段"><a href="#Map阶段" class="headerlink" title="Map阶段"></a>Map阶段</h2><p>map得到的内容如下：</p><pre class=" language-java"><code class="language-java">A <span class="token number">0.25</span> B C D</code></pre><p>这里面有三类信息：</p><ol><li>当前网页名，A</li><li>A当前的PR值，0.25</li><li>A指向的链接网页，B、C、D</li></ol><p>map的输出内容如下：</p><pre class=" language-java"><code class="language-java">A <span class="token annotation punctuation">@B</span> C DB $<span class="token number">0.0833</span>C $<span class="token number">0.0833</span>D $<span class="token number">0.0833</span></code></pre><p>map的输出有两类：</p><ol><li>继续保存当前网页的所有指向链接</li><li>各个被指向链接从当前网页得到的PR值</li></ol><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>pagerank<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>LongWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageRankMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token operator">></span> <span class="token punctuation">{</span>    Text keyInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Text valueInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录网页名</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//网页PR值</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前网页拥有的链接数</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> avg_pr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前网页分出去的平均PR值</span>    <span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">//输入&lt;A,0.25 B C D></span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        StringTokenizer itr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pr <span class="token operator">=</span> Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">countTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        avg_pr <span class="token operator">=</span> pr<span class="token operator">/</span>count<span class="token punctuation">;</span>        String linkIds <span class="token operator">=</span> <span class="token string">"@"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String linkId <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keyInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>linkId<span class="token punctuation">)</span><span class="token punctuation">;</span>            valueInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token operator">+</span>avg_pr<span class="token punctuation">)</span><span class="token punctuation">;</span>            linkIds <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> linkId<span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyInfo<span class="token punctuation">,</span>valueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一种输出类型 &lt;B,$0.0833>、&lt;C,$0.0833>、&lt;D,$0.0833></span>        <span class="token punctuation">}</span>        keyInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        valueInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>linkIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyInfo<span class="token punctuation">,</span>valueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种输出类型 &lt;A,@ B C D></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Reduce阶段"><a href="#Reduce阶段" class="headerlink" title="Reduce阶段"></a>Reduce阶段</h2><p>从Map到Reduce，框架会自动将Key相同的Value合并</p><p>所以Reduce得到的内容如下：</p><pre class=" language-java"><code class="language-java">A <span class="token operator">&lt;</span><span class="token annotation punctuation">@B</span> C D<span class="token punctuation">,</span>$<span class="token number">0.125</span><span class="token operator">></span>B <span class="token operator">&lt;</span><span class="token annotation punctuation">@A</span> D<span class="token punctuation">,</span>$<span class="token number">0.125</span><span class="token punctuation">,</span>$<span class="token number">0.0833</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>Reduce阶段就做两件事;</p><ol><li>将以$开头的PR值进行求和计算，作为此次迭代的网页PR值</li><li>拼接各类字符，组成和输入格式一样的字符串输出</li></ol><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>pagerank<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageRankReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Text keyInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Text valueInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Text<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">float</span> pr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String link <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Text value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token operator">==</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//以$开头</span>                pr <span class="token operator">+=</span> Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//以@开头</span>                link <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pr <span class="token operator">=</span> <span class="token number">0.8f</span> <span class="token operator">*</span> pr <span class="token operator">+</span> <span class="token number">0.2f</span> <span class="token operator">*</span> <span class="token number">0.25f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入跳转因子，进行平滑处理。最后的0.25f其实是网页总数分之一</span>        keyInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        valueInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pr<span class="token operator">+</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyInfo<span class="token punctuation">,</span>valueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h2><p>驱动类都是套路，唯一要注意的就是，PageRank算法需要迭代，在驱动类里需要增加一个循环，一般迭代三四十次就收敛了。这里只迭代3次，简单表示一下。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>pagerank<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageRankDriver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pathIn <span class="token operator">=</span> <span class="token string">"F:\\hadooptemp\\input3"</span><span class="token punctuation">;</span>        String pathOut <span class="token operator">=</span> <span class="token string">"F:\\hadooptemp\\output3"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>PageRankDriver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>PageRankMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>PageRankReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>pathIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>pathOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pathIn <span class="token operator">=</span> pathOut<span class="token punctuation">;</span>            pathOut <span class="token operator">=</span> pathOut <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>迭代三次后的输出内容如下：</p><pre class=" language-java"><code class="language-java">A    <span class="token number">0.12066667</span> B C DB    <span class="token number">0.15711111</span> A DC    <span class="token number">0.56511116</span> CD    <span class="token number">0.15711111</span> B C</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="没有细说的两个问题"><a href="#没有细说的两个问题" class="headerlink" title="没有细说的两个问题"></a>没有细说的两个问题</h2><p>PageRank算法还有一些值得探讨的问题，这里没记录，比如Rank leak和Rank sink问题。简单说明一下：</p><ol><li>Rank leak：一个独立的网页如果没有外出的链接就产生等级泄漏</li></ol><p>解决办法：</p><ul><li>将无出度的节点递归的从图中去掉，待其他节点计算完毕后再添加。</li><li>对无出度的节点添加一条边，指向那些指向它的顶点。</li></ul><ol start="2"><li>Rank sink：整个网页图中的一组紧密链接成环的网页如果没有外出的链接就产生Rank sink。</li></ol><p>解决办法：</p><ul><li>引入随机浏览模型。</li></ul><h2 id="一个网页PR值的计算公式"><a href="#一个网页PR值的计算公式" class="headerlink" title="一个网页PR值的计算公式"></a>一个网页PR值的计算公式</h2><p><img src="https://i.loli.net/2020/05/28/DaGpOgI4CysfQZV.png" alt="Q.bmp"></p><p>其中Mpi是所有对pi网页有出链的网页集合，L(pj)是网页pj的出链数目，N是网页总数，α一般取0.85。（上述代码里α取得是0.8，N为4）也就是这一行代码：</p><pre class=" language-java"><code class="language-java">pr <span class="token operator">=</span> <span class="token number">0.8f</span> <span class="token operator">*</span> pr <span class="token operator">+</span> <span class="token number">0.2f</span> <span class="token operator">*</span> <span class="token number">0.25f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入跳转因子，进行平滑处理。最后的0.25f其实是网页总数分之一</span></code></pre><h2 id="要注意的细节问题"><a href="#要注意的细节问题" class="headerlink" title="要注意的细节问题"></a>要注意的细节问题</h2><ul><li>还是要对每一个阶段的KV值的设定格外注意。</li><li>注意变量的作用域，设为全局变量还是局部变量，道理很简单，但马虎了，不容易查错。就因为这个问题，查了一个小时的错。本来应该是局部变量，结果大意了，设为了全局变量，搞混了几个变量的作用域，导致程序结果错误。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop学习之InvertedIndex</title>
      <link href="/2020/05/25/hadoop-xue-xi-zhi-invertedindex/"/>
      <url>/2020/05/25/hadoop-xue-xi-zhi-invertedindex/</url>
      
        <content type="html"><![CDATA[<p>倒排索引，简单地说就是：根据内容查文档，而不是根据文档查内容。</p><a id="more"></a><h1 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>假设有三个txt文件，内容举例如下：</p><p>1.txt</p><pre class=" language-java"><code class="language-java">a b ca b b b bhello worldhello b</code></pre><p>其他文件内容类似</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>要求输出文件的内容如下：</p><pre class=" language-java"><code class="language-java">a    <span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>b    <span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span>c    <span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>d    <span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>hello    <span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>j    <span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>s    <span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>world    <span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>Map拿到手的内容举例如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a b c"</span><span class="token operator">></span></code></pre><p>Map输出的内容形式如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token operator">&lt;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token operator">&lt;</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span></code></pre><ol start="2"><li>经过Map之后，单纯依靠后面的Reduce阶段，不能同时完成词频统计和生成文档列表，所以必须增加一次Combine阶段</li></ol><p>Combine拿到的内容形式上就是Map输出的内容，Combine的输出内容形式如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">2</span><span class="token operator">></span><span class="token operator">&lt;</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">1</span><span class="token operator">></span></code></pre><p>其他文档的内容类似，里面也可能含有a、b等。</p><ol start="3"><li>Reduce阶段就只需将文件中相同key的value进行统计，组合成文档名加词频的形式就行</li></ol><p>Reduce接收的内容形如Combine输出的内容，它输出内容的kv形式如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>txt<span class="token operator">:</span><span class="token number">3</span><span class="token operator">></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>InvertedIndex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>LongWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileSplit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertedIndexMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储单词和文档名称</span>    <span class="token keyword">private</span> Text keyInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储词频，初始化为1</span>    <span class="token keyword">private</span> Text valueInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到这行数据所在的文件分片</span>        FileSplit fileSplit <span class="token operator">=</span> <span class="token punctuation">(</span>FileSplit<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getInputSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据文件切片得到文件名</span>        String fileName <span class="token operator">=</span> fileSplit<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringTokenizer itr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            keyInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyInfo<span class="token punctuation">,</span>valueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>InvertedIndex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertedIndexCombiner</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Text keyInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Text valueInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Text<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//词频统计</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Text value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> splitIndex <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重新设置key为单词</span>        keyInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>splitIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重新设置value为文档名加词频</span>        valueInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>splitIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyInfo<span class="token punctuation">,</span>valueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>InvertedIndex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertedIndexReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Text valueInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Text<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生成文档列表</span>        String fileList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Text value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            fileList <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这是分号，记录了单词所属的那些文档</span>        <span class="token punctuation">}</span>        valueInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fileList<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>valueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>InvertedIndex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvertedIndexDriver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>InvertedIndexDriver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>InvertedIndexMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setCombinerClass</span><span class="token punctuation">(</span>InvertedIndexCombiner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>InvertedIndexReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map和Reduce输出类型一致时可以简写成下面两句，否则要分别单独指明类型</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h1><ol><li>各个阶段的KV类型一定要小心，没什么特别要求的话，可以统一为Text类型。这样后面的Driver类也可以简写。</li><li>在设置各个阶段的输出内容，也就是KV值时，为了防止出错，应该预先创建要输出的key对象和value对象，而不应该直接对本阶段输入的key对象进行处理，否则容易造成逻辑错误。（这是一次教训，就因为设置kv，造成了逻辑错误，程序运行结束，只有输出文件包，但没有结果文件，查了一个多小时的错。）</li><li>分割字符串时，可以考虑用StringTokenizer类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop学习之WordCount</title>
      <link href="/2020/05/25/hadoop-xue-xi-zhi-wordcount/"/>
      <url>/2020/05/25/hadoop-xue-xi-zhi-wordcount/</url>
      
        <content type="html"><![CDATA[<p>词频统计是MapRedurce编程的一个经典案例</p><a id="more"></a><h1 id="继承Mapper类"><a href="#继承Mapper类" class="headerlink" title="继承Mapper类"></a>继承Mapper类</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span><span class="token punctuation">{</span>    Text k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IntWritable v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        String line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span><span class="token punctuation">{</span>            k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="继承Reducer类"><a href="#继承Reducer类" class="headerlink" title="继承Reducer类"></a>继承Reducer类</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>    IntWritable v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部汇总</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>IntWritable value <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>            count <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="编写驱动类"><a href="#编写驱动类" class="headerlink" title="编写驱动类"></a>编写驱动类</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountDriver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过Job来封装本次MR信息</span>        Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定驱动类、Mapper类、Reducer类</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>WordCountDriver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>WordCountMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>WordCountReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定Mapper类的输出KV类型</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定Reducer类的输出KV类型</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置输入、输出路径</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交Job</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>这里驱动类里的输入输出路径没有写死，可以带参运行。</li><li>Map类里的一点细节，尽量不要在map方法里反复创建对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
